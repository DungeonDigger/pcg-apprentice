package pcgapprentice;

import java.io.IOException;
import java.io.PrintWriter;
import java.text.SimpleDateFormat;
import java.util.Arrays;
import java.util.Date;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.stream.Collectors;

import burlap.behavior.policy.GreedyQPolicy;
import burlap.behavior.policy.PolicyUtils;
import burlap.behavior.singleagent.Episode;
import burlap.behavior.singleagent.learnfromdemo.apprenticeship.ApprenticeshipLearningRequest;
import burlap.behavior.singleagent.planning.stochastic.valueiteration.ValueIteration;
import burlap.mdp.auxiliary.StateGenerator;
import burlap.mdp.core.TerminalFunction;
import burlap.mdp.singleagent.SADomain;
import burlap.mdp.singleagent.model.FactoredModel;
import burlap.mdp.singleagent.model.RewardFunction;
import pcgapprentice.dungeonlevel.DungeonDomainGenerator;
import pcgapprentice.dungeonlevel.DungeonFeatures;
import pcgapprentice.dungeonlevel.DungeonHashableStateFactory;
import pcgapprentice.dungeonlevel.DungeonLimitedStateModel;
import pcgapprentice.dungeonlevel.DungeonStartStateGenerator;
import pcgapprentice.dungeonlevel.DungeonTF;
import pcgapprentice.dungeonlevel.HasExitRF;
import pcgapprentice.dungeonlevel.utils.DemonstrationData;
import pcgapprentice.dungeonlevel.utils.EpisodeReader;
import pcgapprentice.reward.AggregatedRF;

/**
 * The main entry point for running apprenticeship learning and generating policies.
 * Please refer to `trainIrlAgentAndGenerateEpisode` for details on parameters that
 * can be used to customize the training.
 */
public class DungeonIRL {

	public static void main(String[] args) {
		try {
			String[] demoFiles = new String[] {"data/20180605221946-full-demo.dat",
					"data/20180610131233-full-demo.dat",
					"data/20180610131426-full-demo.dat"};
			String[] enemyDemoFiles = new String[] {"data/enemy-demo (1).dat",
					"data/enemy-demo (2).dat",
					"data/enemy-demo (3).dat"};

			trainIrlAgentAndGenerateEpisode(demoFiles, 0.1, 3);
		} catch (IOException e) {
			System.err.println("Unable to read episode file: " + e.getMessage());
			e.printStackTrace();
		}
	}

	/**
	 * Runs apprenticeship learning with the given set of expert demonstration files and trains an agent
	 * based on the learned reward function. Returns a single episode generated by the policy of this agent.
	 *
	 * @param expertDemonstrationFiles The files to read in constructing the MDP and expert trajectories
	 * @param endReward An additional reward to be granted to the agent for reaching the end state
	 * @param agentVisionRadius The radius of vision that the agent has when constructing the MDP. e.g. a value
	 *                          of 3 means the agent will have a 3x3 square centered around itself as a part of
	 *                          its state.
	 * @return An episode generated by the learned agent.
	 * @throws IOException
	 */
	private static Episode trainIrlAgentAndGenerateEpisode(String[] expertDemonstrationFiles, double endReward,
														   int agentVisionRadius) throws IOException {
		// Load the episodes to train the IRL with
		List<Episode> expertEpisodes = EpisodeReader.readEpisodesFromFiles(
				expertDemonstrationFiles);
		// Extract data from the episodes such as frequency data of state transitions
		DemonstrationData demoData = EpisodeReader.getDemonstrationDataFromEpisodes(
				expertEpisodes);
		Map<String, HashMap<String, HashMap<String, Double>>> freq = demoData.frequencyData;

		// Create a new domain generator whose MDP will be created from our sampled frequency data
		DungeonDomainGenerator dungeonDomain = new DungeonDomainGenerator(freq);
		SADomain domain = dungeonDomain.generateDomain();

		// Use simple ValueIteration as a planner for solving MDPs during apprenticeship learning
		ValueIteration planner = new ValueIteration(domain, 0.99, new DungeonHashableStateFactory(), 0.001, 100);

		// Create the class for extracting feature vectors from states
		DungeonFeatures features = new DungeonFeatures(demoData.maxEnemies, demoData.maxTreasures, demoData.maxDoors, demoData.maxOpen);

		// Create a generator for the initial state in the MDP
		StateGenerator startStateGenerator = new DungeonStartStateGenerator();

		// Construct the apprenticeship learning request and produce a policy
		ApprenticeshipLearningRequest request = new ApprenticeshipLearningRequest(domain, planner, features, expertEpisodes, startStateGenerator);
		request.setEpsilon(0.0001);
		RewardFunction learnedReward = ApprenticeshipLearning2.projectionMethodReward(request);

		// Construct a new reward function which combines the learned one with a custom reward for reaching the "end" state
		RewardFunction combinedReward = new AggregatedRF(Arrays.asList(learnedReward, new HasExitRF(endReward)));

		// Solve the MDP using the combined reward function
		domain.setModel(new FactoredModel(new DungeonLimitedStateModel(freq), combinedReward, new DungeonTF()));
		planner.setDomain(domain);
		planner.resetSolver();
		GreedyQPolicy policy = planner.planFromState(startStateGenerator.generateState());

		System.out.println("Finished building policy");

		// Rollout the learned policy to get a sequence of states and actions
		Episode agentEp = PolicyUtils.rollout(policy, startStateGenerator.generateState(), domain.getModel(), 200);

		// Write the policy to a file
		Date dNow = new Date();
		SimpleDateFormat ft = new SimpleDateFormat("yyyy_MM_dd_hhmmss");
		planner.writeValueTable("data/out/" + ft.format(dNow) + "_valtable.yml");

		// Write the rollout to a file
		String actionRollout = agentEp.actionSequence.stream().map(n -> n.actionName()).collect(Collectors.joining("\n"));
		PrintWriter out = new PrintWriter("data/out/" + ft.format(dNow) + "_rollout.txt");
		out.println(actionRollout);
		out.close();

		System.out.println("Done!");

		return agentEp;
	}

}
